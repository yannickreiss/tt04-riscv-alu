--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - ALU.v
#    - decoder.v
  top_module:  "tt_um_yannickreiss_alu"      # Put the name of your top module here, must start with "tt_um_". Make it unique by including your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Yannick Rei√ü"      # Your name
  title:        "8 to 32 Bit RISC-V ALU"      # Project title
  language:     "Verilog" # other examples include Verilog, Amaranth, VHDL, etc
  description:  "Sequential 32 bit RISC-V ALU"      # Short description of what your project does

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      It takes the opcode and both input values in 9 cycles and outputs the result in 4 more cycles.
      The internal logic is working on 32 bit like a normal 32 bit risc-v alu.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Connect chip to in- and outputs.
      Give the needed inputs using the input pins and collect the output using the output pins.

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:       
    - alu_in
    - alu_in
    - alu_in
    - alu_in
    - alu_in
    - alu_in
    - alu_in
    - alu_in
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - alu_out
    - alu_out
    - alu_out
    - alu_out
    - alu_out
    - alu_out
    - alu_out
    - alu_out
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - none
    - none
    - none
    - none
    - none
    - none
    - none
    - none

# The following fields are optional
  tag:          "alu, risc, riscv"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "schnick_"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
